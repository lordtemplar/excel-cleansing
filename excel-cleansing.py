import streamlit as st
import pandas as pd
from cleansing import clean_data
from unit_groups import unit_groups, count_by_group_with_units, count_by_unit

st.set_page_config(layout="centered")  # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤ layout ‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö "centered"

st.title("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô")

# Upload Excel file
uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=["xlsx"])

if uploaded_file is not None:
    try:
        # Load the uploaded file into a DataFrame
        original_df = pd.read_excel(uploaded_file)  # ‡πÄ‡∏Å‡πá‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÄ‡∏î‡∏¥‡∏°‡πÉ‡∏ô original_df

        # Display original data
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î):")
        st.dataframe(original_df, use_container_width=True)  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö‡πÄ‡∏î‡∏¥‡∏°

        # Clean the data and generate a report
        cleaned_df, clean_report = clean_data(original_df)  # ‡∏™‡πà‡∏á original_df ‡πÄ‡∏Ç‡πâ‡∏≤‡∏™‡∏π‡πà clean_data

        # Display cleaned data
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß:")
        st.dataframe(cleaned_df, use_container_width=True)  # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏£ Clean

        # Display clean report
        st.subheader("‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•:")
        st.dataframe(clean_report, use_container_width=True)

        # Display counts by group with subunits (including units with no data)
        st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏Å‡∏•‡∏∏‡πà‡∏° (‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡πà‡∏≠‡∏¢):")
        group_counts_with_units = count_by_group_with_units(cleaned_df, unit_groups)

        for group in group_counts_with_units:
            st.write(f"**{group['‡∏Å‡∏•‡∏∏‡πà‡∏°']}** (‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°: {group['‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏£‡∏ß‡∏°‡πÉ‡∏ô‡∏Å‡∏•‡∏∏‡πà‡∏°']} ‡∏Ñ‡∏ô)")
            st.dataframe(group["‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏¢‡πà‡∏≠‡∏¢"], use_container_width=True)

        # Count people by unit
        st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢:")
        unit_counts = count_by_unit(cleaned_df)

        # Add total row to unit counts
        total_row = pd.DataFrame([["‡∏£‡∏ß‡∏°", unit_counts["‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô"].sum(), ""]], columns=unit_counts.columns)
        unit_counts = pd.concat([unit_counts, total_row], ignore_index=True)

        st.dataframe(unit_counts, use_container_width=True)

        # Function to create a summary report for all units in all groups
        def create_summary_report(cleaned_df, unit_groups):
            summary_report = []

            for group_name, units in unit_groups.items():
                for unit in units:
                    # Count the number of people in each unit
                    unit_count = cleaned_df[cleaned_df["‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î(‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ù‡∏∂‡∏Å‡∏ó‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà)"] == unit].shape[0]
                    summary_report.append({
                        "‡∏Å‡∏•‡∏∏‡πà‡∏°": group_name,
                        "‡∏´‡∏ô‡πà‡∏ß‡∏¢": unit,
                        "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô": unit_count
                    })

            return pd.DataFrame(summary_report)

        # Generate the summary report
        summary_report = create_summary_report(cleaned_df, unit_groups)

        # Add a download button for the summary report
        st.subheader("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢")
        @st.cache_data
        def convert_summary_to_excel(dataframe):
            from io import BytesIO
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                dataframe.to_excel(writer, index=False, sheet_name='Summary Report')
            processed_data = output.getvalue()
            return processed_data

        summary_file = convert_summary_to_excel(summary_report)
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏£‡∏ß‡∏°‡∏ó‡∏∏‡∏Å‡∏´‡∏ô‡πà‡∏ß‡∏¢ (Excel)",
            data=summary_file,
            file_name="Summary_Report.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )

    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
