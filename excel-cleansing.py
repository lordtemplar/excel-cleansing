import streamlit as st
import pandas as pd
import random

def clean_data(df):
    # Rename columns for better readability
    df.columns = [
        "‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î(‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ù‡∏∂‡∏Å‡∏ó‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà)", "‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤", "‡∏ä‡∏∑‡πà‡∏≠", "‡∏ô‡∏≤‡∏°‡∏™‡∏Å‡∏∏‡∏•", 
        "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô", "‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå", "‡∏≠‡∏≤‡∏ä‡∏µ‡∏û", 
        "‡∏ó‡∏±‡∏Å‡∏©‡∏∞(‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á,‡πÑ‡∏Å‡∏î‡πå‡∏ô‡∏≥‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß,‡∏û‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ß,‡∏ä‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏ú‡∏°)"
    ]

    # Step 1: Remove rows where "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô" does not have 13 digits
    df = df[df["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"].astype(str).str.len() == 13]

    # Step 2: Remove duplicate rows based on "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"
    df["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] = df["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"].astype(str).str.strip()
    df = df.drop_duplicates(subset="‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô", keep='first')

    # Step 3: Fill missing values
    df["‡∏ó‡∏±‡∏Å‡∏©‡∏∞(‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á,‡πÑ‡∏Å‡∏î‡πå‡∏ô‡∏≥‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß,‡∏û‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ß,‡∏ä‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏ú‡∏°)"] = df["‡∏ó‡∏±‡∏Å‡∏©‡∏∞(‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á,‡πÑ‡∏Å‡∏î‡πå‡∏ô‡∏≥‡πÄ‡∏ó‡∏µ‡πà‡∏¢‡∏ß,‡∏û‡πà‡∏≠‡∏Ñ‡∏£‡∏±‡∏ß,‡∏ä‡πà‡∏≤‡∏á‡∏ï‡∏±‡∏î‡∏ú‡∏°)"].fillna("‡πÑ‡∏°‡πà‡∏°‡∏µ")

    # Step 4: Validate blood types in "‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î" and replace invalid or missing values
    valid_blood_types = ["‡πÄ‡∏≠", "‡∏ö‡∏µ", "‡πÇ‡∏≠", "‡πÄ‡∏≠‡∏ö‡∏µ"]
    df["‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î"] = df["‡∏Å‡∏£‡∏∏‡πä‡∏õ‡πÄ‡∏•‡∏∑‡∏≠‡∏î"].apply(
        lambda x: x if x in valid_blood_types else random.choice(valid_blood_types)
    )

    # Step 5: Replace all values in "‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤" with "‡∏û‡∏•‡∏ó‡∏´‡∏≤‡∏£"
    df["‡∏Ñ‡∏≥‡∏ô‡∏≥‡∏´‡∏ô‡πâ‡∏≤"] = "‡∏û‡∏•‡∏ó‡∏´‡∏≤‡∏£"

    # Step 6: Clean "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"
    def clean_phone_number(phone):
        if pd.isna(phone):  # If the value is missing
            return None  # Temporary placeholder to be filled later
        phone = str(phone).strip()
        if len(phone) < 10:  # If less than 10 digits
            return phone.zfill(10)  # Pad with leading zeros
        elif len(phone) > 10:  # If more than 10 digits
            return phone[:10]  # Trim to 10 digits
        return phone  # Return as-is if exactly 10 digits

    df["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"] = df["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"].apply(clean_phone_number)

    # Fill missing "‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå" by copying from the row above
    df["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"] = df["‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£‡∏®‡∏±‡∏û‡∏ó‡πå"].fillna(method='ffill')

    # Step 7: Remove duplicate rows across all columns
    df = df.drop_duplicates()

    # Step 8: Ensure "‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô" is a string
    df["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] = df["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"].astype(str)

    return df

def count_people_by_unit(df):
    # Group by "‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î(‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ù‡∏∂‡∏Å‡∏ó‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà)" and count rows
    unit_counts = df["‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î(‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ù‡∏∂‡∏Å‡∏ó‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà)"].value_counts().reset_index()
    unit_counts.columns = ["‡∏™‡∏±‡∏á‡∏Å‡∏±‡∏î(‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ù‡∏∂‡∏Å‡∏ó‡∏´‡∏≤‡∏£‡πÉ‡∏´‡∏°‡πà)", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô"]
    return unit_counts

# Streamlit App
st.title("‡πÇ‡∏õ‡∏£‡πÅ‡∏Å‡∏£‡∏°‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• Excel")

# Upload Excel file
uploaded_file = st.file_uploader("‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel", type=["xlsx"])

if uploaded_file is not None:
    try:
        # Load the uploaded file into a DataFrame
        df = pd.read_excel(uploaded_file)

        # Display original data
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏î‡∏¥‡∏ö (‡∏Å‡πà‡∏≠‡∏ô‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î):")
        st.dataframe(df)

        # Clean the data
        cleaned_df = clean_data(df)

        # Display cleaned data
        st.subheader("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß:")
        st.dataframe(cleaned_df)

        # Count people by unit
        st.subheader("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏Ñ‡∏ô‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏ô‡πà‡∏ß‡∏¢:")
        unit_counts = count_people_by_unit(cleaned_df)
        st.dataframe(unit_counts)

        # Provide download link for the cleaned data
        st.subheader("‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡πÅ‡∏•‡πâ‡∏ß:")
        @st.cache_data
        def convert_df_to_excel(dataframe):
            from io import BytesIO
            output = BytesIO()
            with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
                dataframe.to_excel(writer, index=False, sheet_name='Cleaned Data')
            processed_data = output.getvalue()
            return processed_data

        cleaned_file = convert_df_to_excel(cleaned_df)
        st.download_button(
            label="üì• ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel",
            data=cleaned_file,
            file_name="Cleaned_Data.xlsx",
            mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet",
        )
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {e}")
else:
    st.info("‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
